package com.myweb.www.handler;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.socket.CloseStatus;
import org.springframework.web.socket.TextMessage;
import org.springframework.web.socket.WebSocketHandler;
import org.springframework.web.socket.WebSocketSession;
import org.springframework.web.socket.handler.TextWebSocketHandler;

import com.myweb.www.domain.UserVO;

@Component
@RequestMapping("/echo")
public class EchoHandler extends TextWebSocketHandler{
	private static final Logger logger = LoggerFactory.getLogger(WebSocketHandler.class);
	
	Map<String, WebSocketSession> users = new ConcurrentHashMap<String, WebSocketSession>();
	
	// 클라이언트가 서버로 연결시 웹 소켓 생성
	@Override
	public void afterConnectionEstablished(WebSocketSession session) throws Exception {
		HttpSession httpSession = (HttpSession) session.getAttributes().get(HttpSession.class.getName());
	    if (httpSession != null) {
	        UserVO userVO = (UserVO) httpSession.getAttribute("ses");
	        if (userVO != null) {
	            // 웹 소켓 연결이 생성될 때 WebSocketSession에 사용자 정보를 저장
	            session.getAttributes().put("userVO", userVO);
	        } else {
	            logger.warn("UserVO not found in session for WebSocketSession.");
	        }
	    } else {
	        logger.warn("HttpSession not found for WebSocketSession.");
	    }

	    // 웹 소켓이 생성될 때마다 리스트에 넣어줌
	    sessions.add(session);
	}
	
	//JS에서 메세지 받을 때
	@Override
	protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception {
		// 웹 소켓 연결이 생성될 때 저장한 사용자 정보를 얻음
	    UserVO userVO = (UserVO) session.getAttributes().get("userVO");

	    if (userVO != null) {
	        String userId = userVO.getId();
	        logger.info("WebSocketSession id: {}", userId);

	        String msg = message.getPayload();
	        if (msg != null) {
	            String[] strs = msg.split(",");
	            logger.info(Arrays.toString(strs));

	            if (strs != null && strs.length == 2) {
	                String server = strs[0];
	                String id = strs[1];
	                if (userId.equals(id)) {
	                    TextMessage sendMsg = new TextMessage(server + "가 신청자 " + id + "님의 등업을 완료하였습니다.");
	                    session.sendMessage(sendMsg);
	                }
	            }
	        }
	    } else {
	        logger.warn("UserVO not found in session for WebSocketSession.");
	    }
	}
	
	// 연결 해제될 때
	@Override
	public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception {
		logger.info("Socket 끊음");
		//웹 소켓이 종료될 때마다 리스트에서 뺀다.
		sessions.remove(session);
	}
}