package com.myweb.www.handler;

import java.util.Arrays;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.socket.CloseStatus;
import org.springframework.web.socket.TextMessage;
import org.springframework.web.socket.WebSocketSession;
import org.springframework.web.socket.handler.TextWebSocketHandler;

@RequestMapping("/echo")
public class EchoHandler extends TextWebSocketHandler {
	
	// 로그인중인 개별유저
	Map<String, WebSocketSession> users = new ConcurrentHashMap<String, WebSocketSession>();

    private static Logger logger = LoggerFactory.getLogger(EchoHandler.class);

    // 클라이언트가 연결 되었을 때 실행
    @Override
    public void afterConnectionEstablished(WebSocketSession session) throws Exception {
    	String senderId = getMemberId(session); // 접속한 유저의 http세션을 조회하여 id를 얻는 함수
    	
		if(senderId!=null) {	// 로그인 값이 있는 경우만
			logger.info(senderId + " 연결 됨");
			users.put(senderId, session);   // 로그인중 개별유저 저장
		} else {
            logger.info("senderId == null");
        }
    }

    // 클라이언트가 웹소켓 서버로 메시지를 전송했을 때 실행
    @Override
    protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception {
        String msg = message.getPayload();
        if (msg != null) {
            String[] strs = msg.split(",");
            logger.info("Received message: " + Arrays.toString(strs));
            if (strs.length >= 2) {
                String target = strs[0];
                String notice = strs[1];
                WebSocketSession targetSession = users.get(target);  // 메시지를 받을 세션 조회
                // 실시간 접속시
                if (targetSession != null) {
                    TextMessage tmpMsg = new TextMessage(target + notice);
                    targetSession.sendMessage(tmpMsg);
                }
            } else {
                logger.warn("Invalid message format: " + msg);
                // Add appropriate error handling or response for invalid message format
            }
        }
    }

    // 클라이언트 연결을 끊었을 때 실행
    @Override
    public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception {
    	String senderId = getMemberId(session);
		if(senderId!=null) {	// 로그인 값이 있는 경우만
			logger.info(senderId + " 연결 종료됨");
			users.remove(senderId);
		}
    }

    // 접속한 유저의 http세션을 조회하여 id를 얻는 함수
   	private String getMemberId(WebSocketSession session) {
   		Map<String, Object> httpSession = session.getAttributes();
   		String m_id = (String) httpSession.get("id"); // 세션에 저장된 m_id 기준 조회
   		return m_id==null? null: m_id;
   	}
}
