package com.myweb.www.handler;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.socket.CloseStatus;
import org.springframework.web.socket.TextMessage;
import org.springframework.web.socket.WebSocketSession;
import org.springframework.web.socket.handler.TextWebSocketHandler;

import com.myweb.www.domain.UserVO;

@RequestMapping("/echo")
public class EchoHandler extends TextWebSocketHandler {
	
	// 로그인중인 개별유저
	Map<String, WebSocketSession> users = new ConcurrentHashMap<String, WebSocketSession>();

    private static Logger logger = LoggerFactory.getLogger(EchoHandler.class);

    // 클라이언트가 연결 되었을 때 실행
    @Override
    public void afterConnectionEstablished(WebSocketSession session) throws Exception {
    	UserVO uvo = getUserFromSession(session);
    	String senderId = uvo.getId();
        // 세션에서 UserVO 가져오기
        UserVO userVO = getUserFromSession(session);
        if (userVO != null) {
            logger.info("{}({}) 연결됨", session.getId(), userVO.getId());
        } else {
            logger.info("{} 연결됨", session.getId());
        }
    }

    // 클라이언트가 웹소켓 서버로 메시지를 전송했을 때 실행
    @Override
    protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception {
        // 세션에서 UserVO 가져오기
        UserVO userVO = getUserFromSession(session);

        if (userVO != null) {
            logger.info("{}({})로 부터 {} 받음", session.getId(), userVO.getId(), message.getPayload());
        } else {
            logger.info("{}로 부터 {} 받음", session.getId(), message.getPayload());
        }

        // 모든 유저에게 메세지 전송
        for (WebSocketSession ses : sessionList) {
            ses.sendMessage(new TextMessage(message.getPayload()));
        }
    }

    // 클라이언트 연결을 끊었을 때 실행
    @Override
    public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception {
        // 세션에서 UserVO 가져오기
        UserVO userVO = getUserFromSession(session);

        if (userVO != null) {
            logger.info("{}({}) 연결 끊김.", session.getId(), userVO.getId());
        } else {
            logger.info("{} 연결 끊김.", session.getId());
        }

        sessionList.remove(session);
    }

    // 세션에서 UserVO 가져오기
    private UserVO getUserFromSession(WebSocketSession session) {
        Object userObj = session.getAttributes().get("ses");
        if (userObj instanceof UserVO) {
            return (UserVO) userObj;
        }
        return null;
    }
}
